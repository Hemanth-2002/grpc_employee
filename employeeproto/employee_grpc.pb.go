// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: employeeproto/employee.proto

package grpc_employee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeDatabaseCrudClient is the client API for EmployeeDatabaseCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeDatabaseCrudClient interface {
	CreateEmployee(ctx context.Context, in *NewEmployee, opts ...grpc.CallOption) (*Employee, error)
	GetEmployees(ctx context.Context, in *EmptyEmployee, opts ...grpc.CallOption) (*Employees, error)
	UpdateManager(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error)
	DeleteEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*EmptyEmployee, error)
}

type employeeDatabaseCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeDatabaseCrudClient(cc grpc.ClientConnInterface) EmployeeDatabaseCrudClient {
	return &employeeDatabaseCrudClient{cc}
}

func (c *employeeDatabaseCrudClient) CreateEmployee(ctx context.Context, in *NewEmployee, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/grpc_employee.EmployeeDatabaseCrud/CreateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDatabaseCrudClient) GetEmployees(ctx context.Context, in *EmptyEmployee, opts ...grpc.CallOption) (*Employees, error) {
	out := new(Employees)
	err := c.cc.Invoke(ctx, "/grpc_employee.EmployeeDatabaseCrud/GetEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDatabaseCrudClient) UpdateManager(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/grpc_employee.EmployeeDatabaseCrud/UpdateManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDatabaseCrudClient) DeleteEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*EmptyEmployee, error) {
	out := new(EmptyEmployee)
	err := c.cc.Invoke(ctx, "/grpc_employee.EmployeeDatabaseCrud/DeleteEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeDatabaseCrudServer is the server API for EmployeeDatabaseCrud service.
// All implementations must embed UnimplementedEmployeeDatabaseCrudServer
// for forward compatibility
type EmployeeDatabaseCrudServer interface {
	CreateEmployee(context.Context, *NewEmployee) (*Employee, error)
	GetEmployees(context.Context, *EmptyEmployee) (*Employees, error)
	UpdateManager(context.Context, *Employee) (*Employee, error)
	DeleteEmployee(context.Context, *Employee) (*EmptyEmployee, error)
	mustEmbedUnimplementedEmployeeDatabaseCrudServer()
}

// UnimplementedEmployeeDatabaseCrudServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeDatabaseCrudServer struct {
}

func (UnimplementedEmployeeDatabaseCrudServer) CreateEmployee(context.Context, *NewEmployee) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEmployeeDatabaseCrudServer) GetEmployees(context.Context, *EmptyEmployee) (*Employees, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployees not implemented")
}
func (UnimplementedEmployeeDatabaseCrudServer) UpdateManager(context.Context, *Employee) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManager not implemented")
}
func (UnimplementedEmployeeDatabaseCrudServer) DeleteEmployee(context.Context, *Employee) (*EmptyEmployee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedEmployeeDatabaseCrudServer) mustEmbedUnimplementedEmployeeDatabaseCrudServer() {}

// UnsafeEmployeeDatabaseCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeDatabaseCrudServer will
// result in compilation errors.
type UnsafeEmployeeDatabaseCrudServer interface {
	mustEmbedUnimplementedEmployeeDatabaseCrudServer()
}

func RegisterEmployeeDatabaseCrudServer(s grpc.ServiceRegistrar, srv EmployeeDatabaseCrudServer) {
	s.RegisterService(&EmployeeDatabaseCrud_ServiceDesc, srv)
}

func _EmployeeDatabaseCrud_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmployee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDatabaseCrudServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_employee.EmployeeDatabaseCrud/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDatabaseCrudServer).CreateEmployee(ctx, req.(*NewEmployee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDatabaseCrud_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyEmployee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDatabaseCrudServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_employee.EmployeeDatabaseCrud/GetEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDatabaseCrudServer).GetEmployees(ctx, req.(*EmptyEmployee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDatabaseCrud_UpdateManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDatabaseCrudServer).UpdateManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_employee.EmployeeDatabaseCrud/UpdateManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDatabaseCrudServer).UpdateManager(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDatabaseCrud_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDatabaseCrudServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_employee.EmployeeDatabaseCrud/DeleteEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDatabaseCrudServer).DeleteEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeDatabaseCrud_ServiceDesc is the grpc.ServiceDesc for EmployeeDatabaseCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeDatabaseCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_employee.EmployeeDatabaseCrud",
	HandlerType: (*EmployeeDatabaseCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployee",
			Handler:    _EmployeeDatabaseCrud_CreateEmployee_Handler,
		},
		{
			MethodName: "GetEmployees",
			Handler:    _EmployeeDatabaseCrud_GetEmployees_Handler,
		},
		{
			MethodName: "UpdateManager",
			Handler:    _EmployeeDatabaseCrud_UpdateManager_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _EmployeeDatabaseCrud_DeleteEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employeeproto/employee.proto",
}
